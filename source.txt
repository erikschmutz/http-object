
List of HTTP status codes
From Wikipedia, the free encyclopedia
Jump to navigationJump to search
HTTP
Persistence Compression HTTPS QUIC
Request methods
OPTIONS GET HEAD POST PUT DELETE TRACE CONNECT PATCH
Header fields
Cookie ETag Location HTTP referer DNT X-Forwarded-For
Status codes
301 Moved Permanently 302 Found 303 See Other 403 Forbidden 404 Not Found 451 Unavailable For Legal Reasons
Security access control methods
Basic access authentication Digest access authentication
vte
This is a list of Hypertext Transfer Protocol (HTTP) response status codes. Status codes are issued by a server in response to a client's request made to the server. It includes codes from IETF Request for Comments (RFCs), other specifications, and some additional codes used in some common applications of the Hypertext Transfer Protocol (HTTP). The first digit of the status code specifies one of five standard classes of responses. The message phrases shown are typical, but any human-readable alternative may be provided. Unless otherwise stated, the status code is part of the HTTP/1.1 standard (RFC 7231).[1]

The Internet Assigned Numbers Authority (IANA) maintains the official registry of HTTP status codes.[2]

Microsoft Internet Information Services (IIS) sometimes uses additional decimal sub-codes for more specific information,[3] however these sub-codes only appear in the response payload and in documentation, not in the place of an actual HTTP status code.

All HTTP response status codes are separated into five classes (or categories). The first digit of the status code defines the class of response. The last two digits do not have any class or categorization role. There are five values for the first digit:

1xx (Informational): The request was received, continuing process
2xx (Successful): The request was successfully received, understood and accepted
3xx (Redirection): Further action needs to be taken in order to complete the request
4xx (Client Error): The request contains bad syntax or cannot be fulfilled
5xx (Server Error): The server failed to fulfill an apparently valid request

Contents
1	1xx Informational response
2	2xx Success
3	3xx Redirection
4	4xx Client errors
5	5xx Server errors
6	Unofficial codes
6.1	Internet Information Services
6.2	nginx
6.3	Cloudflare
7	See also
8	Notes
9	References
10	External links
1xx Informational response
An informational response indicates that the request was received and understood. It is issued on a provisional basis while request processing continues. It alerts the client to wait for a final response. The message consists only of the status line and optional header fields, and is terminated by an empty line. As the HTTP/1.0 standard did not define any 1xx status codes, servers must not[note 1] send a 1xx response to an HTTP/1.0 compliant client except under experimental conditions.[4]

100 Continue
The server has received the request headers and the client should proceed to send the request body (in the case of a request for which a body needs to be sent; for example, a POST request). Sending a large request body to a server after a request has been rejected for inappropriate headers would be inefficient. To have a server check the request's headers, a client must send Expect: 100-continue as a header in its initial request and receive a 100 Continue status code in response before sending the body. If the client receives an error code such as 403 (Forbidden) or 405 (Method Not Allowed) then it shouldn't send the request's body. The response 417 Expectation Failed indicates that the request should be repeated without the Expect header as it indicates that the server doesn't support expectations (this is the case, for example, of HTTP/1.0 servers).[5]
101 Switching Protocols
The requester has asked the server to switch protocols and the server has agreed to do so.[6]
102 Processing (WebDAV; RFC 2518)
A WebDAV request may contain many sub-requests involving file operations, requiring a long time to complete the request. This code indicates that the server has received and is processing the request, but no response is available yet.[7] This prevents the client from timing out and assuming the request was lost.
103 Early Hints (RFC 8297)
Used to return some response headers before final HTTP message.[8]
2xx Success
This class of status codes indicates the action requested by the client was received, understood and accepted.[2]

200 OK
Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request, the response will contain an entity describing or containing the result of the action.[9]
201 Created
The request has been fulfilled, resulting in the creation of a new resource.[10]
202 Accepted
The request has been accepted for processing, but the processing has not been completed. The request might or might not be eventually acted upon, and may be disallowed when processing occurs.[11]
203 Non-Authoritative Information (since HTTP/1.1)
The server is a transforming proxy (e.g. a Web accelerator) that received a 200 OK from its origin, but is returning a modified version of the origin's response.[12][13]
204 No Content
The server successfully processed the request and is not returning any content.[14]
205 Reset Content
The server successfully processed the request, but is not returning any content. Unlike a 204 response, this response requires that the requester reset the document view.[15]
206 Partial Content (RFC 7233)
The server is delivering only part of the resource (byte serving) due to a range header sent by the client. The range header is used by HTTP clients to enable resuming of interrupted downloads, or split a download into multiple simultaneous streams.[16]
207 Multi-Status (WebDAV; RFC 4918)
The message body that follows is by default an XML message and can contain a number of separate response codes, depending on how many sub-requests were made.[17]
208 Already Reported (WebDAV; RFC 5842)
The members of a DAV binding have already been enumerated in a preceding part of the (multistatus) response, and are not being included again.
226 IM Used (RFC 3229)
The server has fulfilled a request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance.[18]
3xx Redirection
This class of status code indicates the client must take additional action to complete the request. Many of these status codes are used in URL redirection.[2]

A user agent may carry out the additional action with no user interaction only if the method used in the second request is GET or HEAD. A user agent may automatically redirect a request. A user agent should detect and intervene to prevent cyclical redirects.[19]

300 Multiple Choices
Indicates multiple options for the resource from which the client may choose (via agent-driven content negotiation). For example, this code could be used to present multiple video format options, to list files with different filename extensions, or to suggest word-sense disambiguation.[20]
301 Moved Permanently
This and all future requests should be directed to the given URI.[21]
302 Found (Previously "Moved temporarily")
Tells the client to look at (browse to) another URL. 302 has been superseded by 303 and 307. This is an example of industry practice contradicting the standard. The HTTP/1.0 specification (RFC 1945) required the client to perform a temporary redirect (the original describing phrase was "Moved Temporarily"),[22] but popular browsers implemented 302 with the functionality of a 303 See Other. Therefore, HTTP/1.1 added status codes 303 and 307 to distinguish between the two behaviours.[23] However, some Web applications and frameworks use the 302 status code as if it were the 303.[24]
303 See Other (since HTTP/1.1)
The response to the request can be found under another URI using the GET method. When received in response to a POST (or PUT/DELETE), the client should presume that the server has received the data and should issue a new GET request to the given URI.[25]
304 Not Modified (RFC 7232)
Indicates that the resource has not been modified since the version specified by the request headers If-Modified-Since or If-None-Match. In such case, there is no need to retransmit the resource since the client still has a previously-downloaded copy.[26]
305 Use Proxy (since HTTP/1.1)
The requested resource is available only through a proxy, the address for which is provided in the response. For security reasons, many HTTP clients (such as Mozilla Firefox and Internet Explorer) do not obey this status code.[27]
306 Switch Proxy
No longer used. Originally meant "Subsequent requests should use the specified proxy."[28]
307 Temporary Redirect (since HTTP/1.1)
In this case, the request should be repeated with another URI; however, future requests should still use the original URI. In contrast to how 302 was historically implemented, the request method is not allowed to be changed when reissuing the original request. For example, a POST request should be repeated using another POST request.[29]
308 Permanent Redirect (RFC 7538)
The request and all future requests should be repeated using another URI. 307 and 308 parallel the behaviors of 302 and 301, but do not allow the HTTP method to change. So, for example, submitting a form to a permanently redirected resource may continue smoothly.[30]
4xx Client errors
A 404 error on Wikipedia.
404 error on Wikipedia
This class of status code is intended for situations in which the error seems to have been caused by the client. Except when responding to a HEAD request, the server should include an entity containing an explanation of the error situation, and whether it is a temporary or permanent condition. These status codes are applicable to any request method. User agents should display any included entity to the user.[31]

400 Bad Request
The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, size too large, invalid request message framing, or deceptive request routing).[32]
401 Unauthorized (RFC 7235)
Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided. The response must include a WWW-Authenticate header field containing a challenge applicable to the requested resource. See Basic access authentication and Digest access authentication.[33] 401 semantically means "unauthorised"[34], the user does not have valid authentication credentials for the target resource.
Note: Some sites incorrectly issue HTTP 401 when an IP address is banned from the website (usually the website domain) and that specific address is refused permission to access a website.
402 Payment Required
Reserved for future use. The original intention was that this code might be used as part of some form of digital cash or micropayment scheme, as proposed, for example, by GNU Taler,[35] but that has not yet happened, and this code is not usually used. Google Developers API uses this status if a particular developer has exceeded the daily limit on requests.[36] Sipgate uses this code if an account does not have sufficient funds to start a call.[37] Shopify uses this code when the store has not paid their fees and is temporarily disabled.[38]
403 Forbidden
The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort. This code is also typically used if the request provided authentication via the WWW-Authenticate header field, but the server did not accept that authentication.
404 Not Found
The requested resource could not be found but may be available in the future. Subsequent requests by the client are permissible.
405 Method Not Allowed
A request method is not supported for the requested resource; for example, a GET request on a form that requires data to be presented via POST, or a PUT request on a read-only resource.
406 Not Acceptable
The requested resource is capable of generating only content not acceptable according to the Accept headers sent in the request.[39] See Content negotiation.
407 Proxy Authentication Required (RFC 7235)
The client must first authenticate itself with the proxy.[40]
408 Request Timeout
The server timed out waiting for the request. According to HTTP specifications: "The client did not produce a request within the time that the server was prepared to wait. The client MAY repeat the request without modifications at any later time."[41]
409 Conflict
Indicates that the request could not be processed because of conflict in the current state of the resource, such as an edit conflict between multiple simultaneous updates.
410 Gone
Indicates that the resource requested is no longer available and will not be available again. This should be used when a resource has been intentionally removed and the resource should be purged. Upon receiving a 410 status code, the client should not request the resource in the future. Clients such as search engines should remove the resource from their indices.[42] Most use cases do not require clients and search engines to purge the resource, and a "404 Not Found" may be used instead.
411 Length Required
The request did not specify the length of its content, which is required by the requested resource.[43]
412 Precondition Failed (RFC 7232)
The server does not meet one of the preconditions that the requester put on the request header fields.[44] [45]
413 Payload Too Large (RFC 7231)
The request is larger than the server is willing or able to process. Previously called "Request Entity Too Large".[46]
414 URI Too Long (RFC 7231)
The URI provided was too long for the server to process. Often the result of too much data being encoded as a query-string of a GET request, in which case it should be converted to a POST request.[47] Called "Request-URI Too Long" previously.[48]
415 Unsupported Media Type (RFC 7231)
The request entity has a media type which the server or resource does not support. For example, the client uploads an image as image/svg+xml, but the server requires that images use a different format.[49]
416 Range Not Satisfiable (RFC 7233)
The client has asked for a portion of the file (byte serving), but the server cannot supply that portion. For example, if the client asked for a part of the file that lies beyond the end of the file.[50] Called "Requested Range Not Satisfiable" previously.[51]
417 Expectation Failed
The server cannot meet the requirements of the Expect request-header field.[52]
418 I'm a teapot (RFC 2324, RFC 7168)
This code was defined in 1998 as one of the traditional IETF April Fools' jokes, in RFC 2324, Hyper Text Coffee Pot Control Protocol, and is not expected to be implemented by actual HTTP servers. The RFC specifies this code should be returned by teapots requested to brew coffee.[53] This HTTP status is used as an Easter egg in some websites, including Google.com.[54][55]
421 Misdirected Request (RFC 7540)
The request was directed at a server that is not able to produce a response[56] (for example because of connection reuse).[57]
422 Unprocessable Entity (WebDAV; RFC 4918)
The request was well-formed but was unable to be followed due to semantic errors.[17]
423 Locked (WebDAV; RFC 4918)
The resource that is being accessed is locked.[17]
424 Failed Dependency (WebDAV; RFC 4918)
The request failed because it depended on another request and that request failed (e.g., a PROPPATCH).[17]
425 Too Early (RFC 8470)
Indicates that the server is unwilling to risk processing a request that might be replayed.
426 Upgrade Required
The client should switch to a different protocol such as TLS/1.0, given in the Upgrade header field.[58]
428 Precondition Required (RFC 6585)
The origin server requires the request to be conditional. Intended to prevent the 'lost update' problem, where a client GETs a resource's state, modifies it, and PUTs it back to the server, when meanwhile a third party has modified the state on the server, leading to a conflict.[59]
429 Too Many Requests (RFC 6585)
The user has sent too many requests in a given amount of time. Intended for use with rate-limiting schemes.[59]
431 Request Header Fields Too Large (RFC 6585)
The server is unwilling to process the request because either an individual header field, or all the header fields collectively, are too large.[59]
451 Unavailable For Legal Reasons (RFC 7725)
A server operator has received a legal demand to deny access to a resource or to a set of resources that includes the requested resource.[60] The code 451 was chosen as a reference to the novel Fahrenheit 451 (see the Acknowledgements in the RFC).
5xx Server errors
The server failed to fulfill a request.[61]

Response status codes beginning with the digit "5" indicate cases in which the server is aware that it has encountered an error or is otherwise incapable of performing the request. Except when responding to a HEAD request, the server should include an entity containing an explanation of the error situation, and indicate whether it is a temporary or permanent condition. Likewise, user agents should display any included entity to the user. These response codes are applicable to any request method.[62]

500 Internal Server Error
A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.[63]
501 Not Implemented
The server either does not recognize the request method, or it lacks the ability to fulfil the request. Usually this implies future availability (e.g., a new feature of a web-service API).[64]
502 Bad Gateway
The server was acting as a gateway or proxy and received an invalid response from the upstream server.[65]
503 Service Unavailable
The server cannot handle the request (because it is overloaded or down for maintenance). Generally, this is a temporary state.[66]
504 Gateway Timeout
The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.[67]
505 HTTP Version Not Supported
The server does not support the HTTP protocol version used in the request.[68]
506 Variant Also Negotiates (RFC 2295)
Transparent content negotiation for the request results in a circular reference.[69]
507 Insufficient Storage (WebDAV; RFC 4918)
The server is unable to store the representation needed to complete the request.[17]
508 Loop Detected (WebDAV; RFC 5842)
The server detected an infinite loop while processing the request (sent instead of 208 Already Reported).
510 Not Extended (RFC 2774)
Further extensions to the request are required for the server to fulfil it.[70]
511 Network Authentication Required (RFC 6585)
The client needs to authenticate to gain network access. Intended for use by intercepting proxies used to control access to the network (e.g., "captive portals" used to require agreement to Terms of Service before granting full Internet access via a Wi-Fi hotspot).[59]
Unofficial codes
The following codes are not specified by any standard.

103 Checkpoint
Used in the resumable requests proposal to resume aborted PUT or POST requests.[71]
218 This is fine (Apache Web Server)
Used as a catch-all error condition for allowing response bodies to flow through Apache when ProxyErrorOverride is enabled. When ProxyErrorOverride is enabled in Apache, response bodies that contain a status code of 4xx or 5xx are automatically discarded by Apache in favor of a generic response or a custom response specified by the ErrorDocument directive.[72]
419 Page Expired (Laravel Framework)
Used by the Laravel Framework when a CSRF Token is missing or expired.
420 Method Failure (Spring Framework)
A deprecated response used by the Spring Framework when a method has failed.[73]
420 Enhance Your Calm (Twitter)
Returned by version 1 of the Twitter Search and Trends API when the client is being rate limited; versions 1.1 and later use the 429 Too Many Requests response code instead.[74]
450 Blocked by Windows Parental Controls (Microsoft)
The Microsoft extension code indicated when Windows Parental Controls are turned on and are blocking access to the requested webpage.[75]
498 Invalid Token (Esri)
Returned by ArcGIS for Server. Code 498 indicates an expired or otherwise invalid token.[76]
499 Token Required (Esri)
Returned by ArcGIS for Server. Code 499 indicates that a token is required but was not submitted.[76]
509 Bandwidth Limit Exceeded (Apache Web Server/cPanel)
The server has exceeded the bandwidth specified by the server administrator; this is often used by shared hosting providers to limit the bandwidth of customers.[77]
526 Invalid SSL Certificate
Used by Cloudflare and Cloud Foundry's gorouter to indicate failure to validate the SSL/TLS certificate that the origin server presented.
530 Site is frozen
Used by the Pantheon web platform to indicate a site that has been frozen due to inactivity.[78]
598 (Informal convention) Network read timeout error
Used by some HTTP proxies to signal a network read timeout behind the proxy to a client in front of the proxy.[79]
Internet Information Services
Microsoft's Internet Information Services web server expands the 4xx error space to signal errors with the client's request.

440 Login Time-out
The client's session has expired and must log in again.[80]
449 Retry With
The server cannot honour the request because the user has not provided the required information.[81]
451 Redirect
Used in Exchange ActiveSync when either a more efficient server is available or the server cannot access the users' mailbox.[82] The client is expected to re-run the HTTP AutoDiscover operation to find a more appropriate server.[83]
nginx
The nginx web server software expands the 4xx error space to signal issues with the client's request.[84][85]

444 No Response
Used internally[86] to instruct the server to return no information to the client and close the connection immediately.
494 Request header too large
Client sent too large request or too long header line.
495 SSL Certificate Error
An expansion of the 400 Bad Request response code, used when the client has provided an invalid client certificate.
496 SSL Certificate Required
An expansion of the 400 Bad Request response code, used when a client certificate is required but not provided.
497 HTTP Request Sent to HTTPS Port
An expansion of the 400 Bad Request response code, used when the client has made a HTTP request to a port listening for HTTPS requests.
499 Client Closed Request
Used when the client has closed the request before the server could send a response.
Cloudflare
Cloudflare's reverse proxy service expands the 5xx series of errors space to signal issues with the origin server.[87]

520 Unknown Error
The 520 error is used as a "catch-all response for when the origin server returns something unexpected", listing connection resets, large headers, and empty or invalid responses as common triggers.
521 Web Server Is Down
The origin server has refused the connection from Cloudflare.
522 Connection Timed Out
Cloudflare could not negotiate a TCP handshake with the origin server.
523 Origin Is Unreachable
Cloudflare could not reach the origin server; for example, if the DNS records for the origin server are incorrect.
524 A Timeout Occurred
Cloudflare was able to complete a TCP connection to the origin server, but did not receive a timely HTTP response.
525 SSL Handshake Failed
Cloudflare could not negotiate a SSL/TLS handshake with the origin server.
526 Invalid SSL Certificate
Cloudflare could not validate the SSL certificate on the origin web server.
527 Railgun Error
Error 527 indicates that the request timed out or failed after the WAN connection had been established.[88]
530 Origin DNS Error
Error 530 indicates that the requested host name could not be resolved on the Cloudflare network to an origin server.[89]
See also
Custom error pages
List of FTP server return codes
List of HTTP header fields
List of SMTP server return codes
Common Log Format
Notes
 Italicised words and phrases such as must and should represent interpretation guidelines as given by RFC 2119
References
 "Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content". IETF. Retrieved December 16, 2017.
 "Hypertext Transfer Protocol (HTTP) Status Code Registry". Iana.org. Retrieved January 8, 2015.
 "The HTTP status codes in IIS 7.0". Microsoft. July 14, 2009. Retrieved April 1, 2009.
 "10 Status Code Definitions". W3. Retrieved October 16, 2015.
 "Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content - 5.1.1. Expect". Retrieved September 27, 2017.
 "101". httpstatus. Retrieved October 16, 2015.
 Goland, Yaronn; Whitehead, Jim; Faizi, Asad; Carter, Steve R.; Jensen, Del (February 1999). HTTP Extensions for Distributed Authoring – WEBDAV. IETF. doi:10.17487/RFC2518. RFC 2518. Retrieved October 24, 2009.
 Oku, Kazuho (December 2017). An HTTP Status Code for Indicating Hints. IETF. doi:10.17487/RFC8297. RFC 8297. Retrieved December 20, 2017.
 "200 OK". Hypertext Transfer Protocol -- HTTP/1.1. IETF. June 1999. sec. 10.2.1. doi:10.17487/RFC2616. RFC 2616. Retrieved August 30, 2016.
 Stewart, Mark; djna. "Create request with POST, which response codes 200 or 201 and content". Stack Overflow. Retrieved October 16, 2015.
 "202". httpstatus. Retrieved October 16, 2015.
 "RFC 7231, Section 6.3.4".
 "RFC 7230, Section 5.7.2".
 Simmance, Chris. "Server Response Codes And What They Mean". koozai. Retrieved October 16, 2015.
 "IETF RFC7231 section 6.3.6. - 205 Reset Content". IETF.org. Retrieved September 6, 2018.
 "diff --git a/linkchecker.module b/linkchecker.module". Drupal. Retrieved October 16, 2015.
 Dusseault, Lisa, ed. (June 2007). HTTP Extensions for Web Distributed Authoring and Versioning (WebDAV). IETF. doi:10.17487/RFC4918. RFC 4918. Retrieved October 24, 2009.
 Delta encoding in HTTP. IETF. January 2002. doi:10.17487/RFC3229. RFC 3229. Retrieved February 25, 2011.
 "Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content". IETF. Retrieved February 13, 2016.
 "300". httpstatus. Retrieved October 16, 2015.
 "301". httpstatus. Retrieved October 16, 2015.
 Berners-Lee, Tim; Fielding, Roy T.; Nielsen, Henrik Frystyk (May 1996). Hypertext Transfer Protocol – HTTP/1.0. IETF. doi:10.17487/RFC1945. RFC 1945. Retrieved October 24, 2009.
 "Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, Section 6.4". IETF. Retrieved June 12, 2014.
 "Reference of method redirect_to in Ruby Web Framework "Ruby on Rails". It states: The redirection happens as a "302 Moved" header unless otherwise specified". Retrieved June 30, 2012.
 "303". httpstatus. Retrieved October 16, 2015.
 "304 Not Modified". Mozilla Developer Network. Retrieved July 6, 2017.
 "Mozilla Bugzilla Bug 187996: Strange behavior on 305 redirect, comment 13". March 3, 2003. Retrieved May 21, 2009.
 Cohen, Josh. "HTTP/1.1 305 and 306 Response Codes". HTTP Working Group.
 "Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, Section 6.4.7 307 Temporary Redirect". IETF. 2014. Retrieved September 20, 2014.
 "The Hypertext Transfer Protocol Status Code 308 (Permanent Redirect)". Internet Engineering Task Force. April 2015. Retrieved April 6, 2015.
 "E Explanation of Failure Codes". Oracle. Retrieved October 16, 2015.
 "RFC7231 on code 400". Tools.ietf.org. Retrieved January 8, 2015.
 "401". httpstatus. Retrieved October 16, 2015.
 "RFC7235 on code 401". Tools.ietf.org. Retrieved February 8, 2015.
 "The GNU Taler tutorial for PHP Web shop developers 0.4.0". docs.taler.net. Retrieved October 29, 2017.
 "Google API Standard Error Responses". 2016. Retrieved June 21, 2017.
 "Sipgate API Documentation". Retrieved July 10, 2018.
 "Shopify Documentation". Retrieved July 25, 2018.
 Singh, Prabhat; user1740567. "Spring 3.x JSON status 406 "characteristics not acceptable according to the request "accept" headers ()"". Stack Overflow. Retrieved October 16, 2015.
 "407". httpstatus. Retrieved October 16, 2015.
 "408". httpstatus. Retrieved October 16, 2015.
 "Does Google treat 404 and 410 status codes differently? (Youtube)". 2014. Retrieved February 4, 2015.
 "List of HTTP status codes". Google Books. Retrieved October 16, 2015.
 https://tools.ietf.org/html/rfc7232#section-4.2
 Kowser; Patel, Amit. "REST response code for invalid data". Stack Overflow. Retrieved October 16, 2015.
 "RFC2616 on status 413". Tools.ietf.org. Retrieved November 11, 2015.
 user27828. "GET Request - Why is my URI so long?". Stack Overflow. Retrieved October 16, 2015.
 "RFC2616 on status 414". Tools.ietf.org. Retrieved November 11, 2015.
 "RFC7231 on status 415". Tools.ietf.org. Retrieved May 2, 2019.
 Sigler, Chris. "416 Requested Range Not Satisfiable". GetStatusCode. Archived from the original on October 22, 2015. Retrieved October 16, 2015.
 "RFC2616 on status 416". Tools.ietf.org. Retrieved November 11, 2015.
 TheDeadLike. "HTTP/1.1 Status Codes 400 and 417, cannot choose which". serverFault. Retrieved October 16, 2015.
 Larry Masinter (April 1, 1998). Hyper Text Coffee Pot Control Protocol (HTCPCP/1.0). doi:10.17487/RFC2324. RFC 2324. Any attempt to brew coffee with a teapot should result in the error code "418 I'm a teapot". The resulting entity body MAY be short and stout.
 Barry Schwartz (August 26, 2014). "New Google Easter Egg For SEO Geeks: Server Status 418, I'm A Teapot". Search Engine Land.
 Google's Teapot
 "Hypertext Transfer Protocol version 2". March 2015. Retrieved April 25, 2015.
 "9.1.1. Connection Reuse". RFC7540. May 2015.
 Khare, R; Lawrence, S. "Upgrading to TLS Within HTTP/1.1". IETF. Network Working Group. Retrieved October 16, 2015.
 Nottingham, M.; Fielding, R. (April 2012). "RFC 6585 – Additional HTTP Status Codes". Request for Comments. Internet Engineering Task Force. Retrieved May 1, 2012.
 Bray, T. (February 2016). "An HTTP Status Code to Report Legal Obstacles". ietf.org. Retrieved March 7, 2015.
 "Server Error Codes". CSGNetwork.com. Retrieved October 16, 2015.
 mrGott. "HTTP Status Codes To Handle Errors In Your API". mrGott. Archived from the original on September 30, 2015. Retrieved October 16, 2015.
 Fisher, Tim. "500 Internal Server Error". Lifewire. Retrieved February 22, 2017.
 "HTTP Error 501 Not implemented". Check Up Down. Retrieved February 22, 2017.
 Fisher, Tim. "502 Bad Gateway". Lifewire. Retrieved February 22, 2017.
 alex. "What is the correct HTTP status code to send when a site is down for maintenance?". Stack Overflow. Retrieved October 16, 2015.
 "HTTP Error 504 Gateway timeout". Check Up Down. Retrieved October 16, 2015.
 "HTTP Error 505 - HTTP version not supported". Check Up Down. Retrieved October 16, 2015.
 Holtman, Koen; Mutz, Andrew H. (March 1998). Transparent Content Negotiation in HTTP. IETF. doi:10.17487/RFC2295. RFC 2295. Retrieved October 24, 2009.
 Nielsen, Henrik Frystyk; Leach, Paul; Lawrence, Scott (February 2000). An HTTP Extension Framework. IETF. doi:10.17487/RFC2774. RFC 2774. Retrieved October 24, 2009.
 "ResumableHttpRequestsProposal". Archived from the original on October 13, 2015. Retrieved March 8, 2017.
 "Apache ProxyErrorOverride". Retrieved June 7, 2018.
 "Enum HttpStatus". Spring Framework. org.springframework.http. Retrieved October 16, 2015.
 "Twitter Error Codes & Responses". Twitter. 2014. Retrieved January 20, 2014.
 "Screenshot of error page" (bmp). Retrieved October 11, 2009.
 "Using token-based authentication". ArcGIS Server SOAP SDK.
 "HTTP Error Codes and Quick Fixes". Docs.cpanel.net. Retrieved October 15, 2015.
 "Platform Considerations | Pantheon Docs". pantheon.io.
 http://www.injosoft.se, Injosoft AB. "HTTP status codes - ascii-code.com". www.ascii-code.com. Retrieved December 23, 2016.
 "Error message when you try to log on to Exchange 2007 by using Outlook Web Access: "440 Login Time-out"". Microsoft. 2010. Retrieved November 13, 2013.
 "2.2.6 449 Retry With Status Code". Microsoft. 2009. Retrieved October 26, 2009.
 "MS-ASCMD, Section 3.1.5.2.2". Msdn.microsoft.com. Retrieved January 8, 2015.
 "Ms-oxdisco". Msdn.microsoft.com. Retrieved January 8, 2015.
 "ngx_http_request.h". nginx 1.9.5 source code. nginx inc. Retrieved January 9, 2016.
 "ngx_http_special_response.c". nginx 1.9.5 source code. nginx inc. Retrieved January 9, 2016.
 "return" directive (http_rewrite module) documentation.
 "Troubleshooting: Error Pages". Cloudflare. Retrieved January 9, 2016.
 "Railgun Listener to Origin Error". Cloudflare. Retrieved October 12, 2016.
 "Error 1016 - Origin DNS error". Cloudflare.
External links
	Wikimedia Commons has media related to Hypertext Transfer Protocol.
Hypertext Transfer Protocol (HTTP) Status Code Registry
Microsoft Knowledge Base: MSKB943891: The HTTP status codes in IIS 7.0
vte
Error messages
System failure	
Bomb icon Fatal system error Guru Meditation Kernel panic Linux kernel oops Red Ring of Death Sad Mac Screen of death Blue Black
Application failure	
ABEND Fatal exception error Segmentation fault
Device and data errors	
HTTP 403 HTTP 404 lp0 on fire Not a typewriter PC LOAD LETTER
Other	
Abort, Retry, Fail? Bad command or file name Halt and Catch Fire HTTP 418 Out of memory
Lists	
List of HTTP status codes List of FTP server return codes
Related	
Spinning pinwheel Windows wait cursor
Categories: Hypertext Transfer Protocol status codesInternet-related lists
Navigation menu
Not logged inTalkContributionsCreate accountLog inArticleTalkReadEditView historySearch
Search Wikipedia
Main page
Contents
Featured content
Current events
Random article
Donate to Wikipedia
Wikipedia store
Interaction
Help
About Wikipedia
Community portal
Recent changes
Contact page
Tools
What links here
Related changes
Upload file
Special pages
Permanent link
Page information
Wikidata item
Cite this page
Print/export
Create a book
Download as PDF
Printable version

Languages
Español
Français
Bahasa Indonesia
Bahasa Melayu
Português
Русский
Suomi
Svenska
中文
19 more
Edit links
This page was last edited on 24 June 2019, at 06:41 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
Privacy policyAbout WikipediaDisclaimersContact WikipediaDevelopersCookie statementMobile viewWikimedia Foundation Powered by MediaWiki
